<?php
/**
 * HeadlessContentPage
 *
 * PHP version 5
 *
 * @category Class
 * @package  Agility\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Agility CMS REST API
 *
 * Agility CMS REST API for retrieving content from the Agility CMS.  The API Types are fetch (for published content) and preview (for latest, or staging content).
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Agility\Client\Model;

use \ArrayAccess;
use \Agility\Client\ObjectSerializer;

/**
 * HeadlessContentPage Class Doc Comment
 *
 * @category Class
 * @package  Agility\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HeadlessContentPage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HeadlessContentPage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'page_id' => 'int',
'name' => 'string',
'path' => 'string',
'title' => 'string',
'menu_text' => 'string',
'visible' => '\Agility\Client\Model\HeadlessContentPageVisibility',
'template_name' => 'string',
'redirect_url' => 'string',
'secure_page' => 'bool',
'exclude_from_output_cache' => 'bool',
'seo' => '\Agility\Client\Model\HeadlessContentItemSeo',
'scripts' => '\Agility\Client\Model\HeadlessContentScripts',
'properties' => '\Agility\Client\Model\HeadlessContentItemProperties',
'zones' => 'map[string,\Agility\Client\Model\HeadlessContentZone[]]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'page_id' => 'int32',
'name' => null,
'path' => null,
'title' => null,
'menu_text' => null,
'visible' => null,
'template_name' => null,
'redirect_url' => null,
'secure_page' => null,
'exclude_from_output_cache' => null,
'seo' => null,
'scripts' => null,
'properties' => null,
'zones' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'page_id' => 'pageID',
'name' => 'name',
'path' => 'path',
'title' => 'title',
'menu_text' => 'menuText',
'visible' => 'visible',
'template_name' => 'templateName',
'redirect_url' => 'redirectUrl',
'secure_page' => 'securePage',
'exclude_from_output_cache' => 'excludeFromOutputCache',
'seo' => 'seo',
'scripts' => 'scripts',
'properties' => 'properties',
'zones' => 'zones'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'page_id' => 'setPageId',
'name' => 'setName',
'path' => 'setPath',
'title' => 'setTitle',
'menu_text' => 'setMenuText',
'visible' => 'setVisible',
'template_name' => 'setTemplateName',
'redirect_url' => 'setRedirectUrl',
'secure_page' => 'setSecurePage',
'exclude_from_output_cache' => 'setExcludeFromOutputCache',
'seo' => 'setSeo',
'scripts' => 'setScripts',
'properties' => 'setProperties',
'zones' => 'setZones'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'page_id' => 'getPageId',
'name' => 'getName',
'path' => 'getPath',
'title' => 'getTitle',
'menu_text' => 'getMenuText',
'visible' => 'getVisible',
'template_name' => 'getTemplateName',
'redirect_url' => 'getRedirectUrl',
'secure_page' => 'getSecurePage',
'exclude_from_output_cache' => 'getExcludeFromOutputCache',
'seo' => 'getSeo',
'scripts' => 'getScripts',
'properties' => 'getProperties',
'zones' => 'getZones'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['page_id'] = isset($data['page_id']) ? $data['page_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['menu_text'] = isset($data['menu_text']) ? $data['menu_text'] : null;
        $this->container['visible'] = isset($data['visible']) ? $data['visible'] : null;
        $this->container['template_name'] = isset($data['template_name']) ? $data['template_name'] : null;
        $this->container['redirect_url'] = isset($data['redirect_url']) ? $data['redirect_url'] : null;
        $this->container['secure_page'] = isset($data['secure_page']) ? $data['secure_page'] : null;
        $this->container['exclude_from_output_cache'] = isset($data['exclude_from_output_cache']) ? $data['exclude_from_output_cache'] : null;
        $this->container['seo'] = isset($data['seo']) ? $data['seo'] : null;
        $this->container['scripts'] = isset($data['scripts']) ? $data['scripts'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
        $this->container['zones'] = isset($data['zones']) ? $data['zones'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets page_id
     *
     * @return int
     */
    public function getPageId()
    {
        return $this->container['page_id'];
    }

    /**
     * Sets page_id
     *
     * @param int $page_id ID of the page.
     *
     * @return $this
     */
    public function setPageId($page_id)
    {
        $this->container['page_id'] = $page_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Page name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path Path of the page.
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title of the page.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets menu_text
     *
     * @return string
     */
    public function getMenuText()
    {
        return $this->container['menu_text'];
    }

    /**
     * Sets menu_text
     *
     * @param string $menu_text Menu text for the page.
     *
     * @return $this
     */
    public function setMenuText($menu_text)
    {
        $this->container['menu_text'] = $menu_text;

        return $this;
    }

    /**
     * Gets visible
     *
     * @return \Agility\Client\Model\HeadlessContentPageVisibility
     */
    public function getVisible()
    {
        return $this->container['visible'];
    }

    /**
     * Sets visible
     *
     * @param \Agility\Client\Model\HeadlessContentPageVisibility $visible visible
     *
     * @return $this
     */
    public function setVisible($visible)
    {
        $this->container['visible'] = $visible;

        return $this;
    }

    /**
     * Gets template_name
     *
     * @return string
     */
    public function getTemplateName()
    {
        return $this->container['template_name'];
    }

    /**
     * Sets template_name
     *
     * @param string $template_name Name of the template used to create the page.
     *
     * @return $this
     */
    public function setTemplateName($template_name)
    {
        $this->container['template_name'] = $template_name;

        return $this;
    }

    /**
     * Gets redirect_url
     *
     * @return string
     */
    public function getRedirectUrl()
    {
        return $this->container['redirect_url'];
    }

    /**
     * Sets redirect_url
     *
     * @param string $redirect_url Redirect url of the page.
     *
     * @return $this
     */
    public function setRedirectUrl($redirect_url)
    {
        $this->container['redirect_url'] = $redirect_url;

        return $this;
    }

    /**
     * Gets secure_page
     *
     * @return bool
     */
    public function getSecurePage()
    {
        return $this->container['secure_page'];
    }

    /**
     * Sets secure_page
     *
     * @param bool $secure_page Indicates if the page is secure.
     *
     * @return $this
     */
    public function setSecurePage($secure_page)
    {
        $this->container['secure_page'] = $secure_page;

        return $this;
    }

    /**
     * Gets exclude_from_output_cache
     *
     * @return bool
     */
    public function getExcludeFromOutputCache()
    {
        return $this->container['exclude_from_output_cache'];
    }

    /**
     * Sets exclude_from_output_cache
     *
     * @param bool $exclude_from_output_cache Indicates if the page is excluded from cache.
     *
     * @return $this
     */
    public function setExcludeFromOutputCache($exclude_from_output_cache)
    {
        $this->container['exclude_from_output_cache'] = $exclude_from_output_cache;

        return $this;
    }

    /**
     * Gets seo
     *
     * @return \Agility\Client\Model\HeadlessContentItemSeo
     */
    public function getSeo()
    {
        return $this->container['seo'];
    }

    /**
     * Sets seo
     *
     * @param \Agility\Client\Model\HeadlessContentItemSeo $seo seo
     *
     * @return $this
     */
    public function setSeo($seo)
    {
        $this->container['seo'] = $seo;

        return $this;
    }

    /**
     * Gets scripts
     *
     * @return \Agility\Client\Model\HeadlessContentScripts
     */
    public function getScripts()
    {
        return $this->container['scripts'];
    }

    /**
     * Sets scripts
     *
     * @param \Agility\Client\Model\HeadlessContentScripts $scripts scripts
     *
     * @return $this
     */
    public function setScripts($scripts)
    {
        $this->container['scripts'] = $scripts;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \Agility\Client\Model\HeadlessContentItemProperties
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \Agility\Client\Model\HeadlessContentItemProperties $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }

    /**
     * Gets zones
     *
     * @return map[string,\Agility\Client\Model\HeadlessContentZone[]]
     */
    public function getZones()
    {
        return $this->container['zones'];
    }

    /**
     * Sets zones
     *
     * @param map[string,\Agility\Client\Model\HeadlessContentZone[]] $zones Zones on the page defined by the template
     *
     * @return $this
     */
    public function setZones($zones)
    {
        $this->container['zones'] = $zones;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
