<?php
/**
 * HeadlessContentItemProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  Agility\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Agility CMS REST API
 *
 * Agility CMS REST API for retrieving content from the Agility CMS.  The API Types are fetch (for published content) and preview (for latest, or staging content).
 *
 * OpenAPI spec version: v1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Agility\Client\Model;

use \ArrayAccess;
use \Agility\Client\ObjectSerializer;

/**
 * HeadlessContentItemProperties Class Doc Comment
 *
 * @category Class
 * @package  Agility\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HeadlessContentItemProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HeadlessContentItemProperties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'state' => 'int',
'modified' => '\DateTime',
'created' => '\DateTime',
'version_id' => 'int',
'reference_name' => 'string',
'definition_name' => 'string',
'sync_token' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'state' => 'int32',
'modified' => 'date-time',
'created' => 'date-time',
'version_id' => 'int32',
'reference_name' => null,
'definition_name' => null,
'sync_token' => 'int64'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'state' => 'state',
'modified' => 'modified',
'created' => 'created',
'version_id' => 'versionID',
'reference_name' => 'referenceName',
'definition_name' => 'definitionName',
'sync_token' => 'syncToken'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'state' => 'setState',
'modified' => 'setModified',
'created' => 'setCreated',
'version_id' => 'setVersionId',
'reference_name' => 'setReferenceName',
'definition_name' => 'setDefinitionName',
'sync_token' => 'setSyncToken'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'state' => 'getState',
'modified' => 'getModified',
'created' => 'getCreated',
'version_id' => 'getVersionId',
'reference_name' => 'getReferenceName',
'definition_name' => 'getDefinitionName',
'sync_token' => 'getSyncToken'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['modified'] = isset($data['modified']) ? $data['modified'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['version_id'] = isset($data['version_id']) ? $data['version_id'] : null;
        $this->container['reference_name'] = isset($data['reference_name']) ? $data['reference_name'] : null;
        $this->container['definition_name'] = isset($data['definition_name']) ? $data['definition_name'] : null;
        $this->container['sync_token'] = isset($data['sync_token']) ? $data['sync_token'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets state
     *
     * @return int
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param int $state The state of this content item. 1 = Staging, 2 = Published, 3 = Deleted, 4 = Approved, 5 = AwaitingApproval, 6 = Declined, 7 = Unpublished
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets modified
     *
     * @return \DateTime
     */
    public function getModified()
    {
        return $this->container['modified'];
    }

    /**
     * Sets modified
     *
     * @param \DateTime $modified The date/time the item was last modified
     *
     * @return $this
     */
    public function setModified($modified)
    {
        $this->container['modified'] = $modified;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The date/time this item was last modified.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets version_id
     *
     * @return int
     */
    public function getVersionId()
    {
        return $this->container['version_id'];
    }

    /**
     * Sets version_id
     *
     * @param int $version_id The unique versionID of this content item.
     *
     * @return $this
     */
    public function setVersionId($version_id)
    {
        $this->container['version_id'] = $version_id;

        return $this;
    }

    /**
     * Gets reference_name
     *
     * @return string
     */
    public function getReferenceName()
    {
        return $this->container['reference_name'];
    }

    /**
     * Sets reference_name
     *
     * @param string $reference_name The reference name of this item is part of. This may be the reference name of a content list, item, or module.
     *
     * @return $this
     */
    public function setReferenceName($reference_name)
    {
        $this->container['reference_name'] = $reference_name;

        return $this;
    }

    /**
     * Gets definition_name
     *
     * @return string
     */
    public function getDefinitionName()
    {
        return $this->container['definition_name'];
    }

    /**
     * Sets definition_name
     *
     * @param string $definition_name The reference name of the content/module definition this item is based on.
     *
     * @return $this
     */
    public function setDefinitionName($definition_name)
    {
        $this->container['definition_name'] = $definition_name;

        return $this;
    }

    /**
     * Gets sync_token
     *
     * @return int
     */
    public function getSyncToken()
    {
        return $this->container['sync_token'];
    }

    /**
     * Sets sync_token
     *
     * @param int $sync_token Used for sync tracking.
     *
     * @return $this
     */
    public function setSyncToken($sync_token)
    {
        $this->container['sync_token'] = $sync_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
